#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Perun::Agent;
use Perun::Common qw(printMessage); 
use Switch;

sub help {
return qq{
Sets the VO attribute. VO id or VO short name and attribute value and attribute id or name are required.
---------------------------------------------------------------
Available options:
 --voId            | -v vo id 
 --voShortName     | -V vo short name
 --attributeId     | -a attribute id
 --attributeName   | -A attribute name including namespace
 --attributeValue  | -w attribute value
 --batch           | -b batch
 --help            | -h prints this help

};
}

my ($voId, $voShortName, $attributeId, $attributeName, @attributeValue);
our $batch;
GetOptions ("help|h" => sub { print help(); exit 0;} ,"batch|b" => \$batch,
 "voId|v=i" => \$voId,
 "voShortName|V=s" => \$voShortName, 
 "attributeId|a=i" => \$attributeId, 
 "attributeName|A=s" => \$attributeName, 'attributeValue|w=s@{1,}' => \@attributeValue) || die help(); 

# Check options
unless (defined($voId) or defined($voShortName)) { die "ERROR: voId or voShortName is required \n";}
unless (defined($attributeId) or defined($attributeName)) { die "ERROR: attributeId or attributeName is required \n";}
unless (@attributeValue) { die "ERROR: attributeValue is required \n";}

my $agent = Perun::Agent->new();
unless($voId) {
    my $vosAgent = $agent->getVosAgent;
    my $vo = $vosAgent->getVoByShortName(shortName => $voShortName);
    $voId=$vo->getId;
}

my $attributesAgent = $agent->getAttributesAgent;
my $attributeDefinition;

if (!defined($attributeId)) {
  $attributeDefinition =  $attributesAgent->getAttributeDefinition(attributeName => $attributeName);
} else {
  $attributeDefinition =  $attributesAgent->getAttributeDefinitionById(id => $attributeId);
}

# Get the attribute definition and create the attribute
my $attribute = Perun::beans::Attribute->fromAttributeDefinition($attributeDefinition);

$attribute->setValueFromArray(@attributeValue);

$attributesAgent->setAttribute(vo => $voId, attribute => $attribute);

printMessage("Attribute Id:".$attribute->getId." set for the vo Id: $voId", $batch);
